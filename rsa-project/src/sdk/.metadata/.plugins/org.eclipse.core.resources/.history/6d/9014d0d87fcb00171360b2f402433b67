#include "sw.h"
#include "global.h"

#include <stdint.h>

// Calculates res = (x^exp) mod N
void mod_exp(uint32_t *x, uint32_t exp, uint32_t exp_len, uint32_t *n, uint32_t *n_prime, uint32_t *res)
{
	int i;
	int bit;

	uint32_t x_tilde[32], A[32];

	// Calculate x_tilde = MontMul(x, R^2 mod m)
	// montgomery_multiply(msg, R2_1024, n, n_prime, x_tilde, SIZE);

	// Copy R to A
	// for(i = 0; i < len; i++)
	//   A[i] = R1024[i];


	for(i = exp_len-1; i>=0; i--)
	{
		bit = (exp >> i) & 1;

		printf("Bit[%d] of exponent is: %d\n", i, bit);

		// Calculate A = MontMul(A, A)
		// montgomery_multiply(A, A, n, n_prime, A, SIZE);

		if(bit)
		{
			// Calculate A = MontMul(A, x_tilde)
			// montgomery_multiply(A, x_tilde, n, n_prime, A, SIZE);
		}

	}

	// Calculate A = MontMul(A, 1)
	// montgomery_multiply(A, one, n, n_prime, A, SIZE);
}

// Calculates res = (a * b / R) mod N where R = 2^1024
void montgomery_multiply(uint32_t *a, uint32_t *b, uint32_t *n, uint32_t *n_prime, uint32_t *res, uint32_t size)
{

}

// Calculates res = (a + b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_add(uint32_t *a, uint32_t *b, uint32_t *N, uint32_t *res, uint32_t size)
{

}

// Calculates res = (a - b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_sub(uint32_t *a, uint32_t *b, uint32_t *N, uint32_t *res, uint32_t size)
{

}

// Calculates res = a + b.
// a and b represent large integers stored in uint32_t arrays
// a and b are arrays of size elements, res has size+1 elements
void mp_add(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{

}

// Calculates res = a - b.
// a and b represent large integers stored in uint32_t arrays
// a, b and res are arrays of size elements
void mp_sub(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{

}
