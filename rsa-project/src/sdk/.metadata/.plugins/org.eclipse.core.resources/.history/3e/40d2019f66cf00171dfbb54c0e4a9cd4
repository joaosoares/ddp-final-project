#include <stdio.h>
#include <stdlib.h>

#include "xil_printf.h"
#include "xil_cache.h"

#include "platform/platform.h"
#include "platform/performance_counters.h"

#include "interface.h"
#include "sw.h"
#include "hw.h"

// These variables are defined and assigned in testvector.c
extern uint32_t M[32],
                N[32],       N_prime[32],
                e[32],
                e_len,
                p[16],       q[16],
                d_p[16],     d_q[16],
                d_p_len[16], d_q_len[16],
                x_p[32],     x_q[32],
                R2p[16],     R2q[16],
                R_1024[32],  R2_1024[32],
                One[32];


// Note that these tree CMDs are same as
// they are defined in montgomery_wrapper.v
#define CMD_READ    0
#define CMD_COMPUTE 1
#define CMD_WRITE   2

int main()
{
    int i;

    init_platform();
    init_performance_counters(1);
    interface_init();

    xil_printf("Startup..\n\r");

    START_TIMING
	test_dma_transfer();
    STOP_TIMING

    ////////////// Test the port-based communication //////////////

	//// --- Create and initialize src array

#if NUMBER_OF_CORES == 1
	// If NUMBER_OF_CORES == 1
	// then all 16 words defined below will be used to communicate with Core 1

//	unsigned int src[DMA_TRANSFER_NUMBER_OF_WORDS]={
//		0x00000000, 0x00000000, 0x01234567, 0x89abcdef,
//		0x00000000, 0x00000000, 0x00000000, 0x00000000,
//		0x00000000, 0x00000000, 0x00000000, 0x00000000,
//		0x00000000, 0x00000000, 0x00000000, 0x00000000};

	unsigned int srca[DMA_TRANSFER_NUMBER_OF_WORDS*2]={
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x76543210, 0xfedcba98, 0x00000000, 0x00000000,

			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x89abcdef, 0x01234567, 0x00000000, 0x00000000};

	    // You can even use the src1 and src2 values defined below
	    // to reach lower 16-words of the src array as src1
	    // and to higher 16-words of as src2
//	    unsigned int* src1 = srca;
	    unsigned int* src  = (srca+16);

#else
    // If NUMBER_OF_CORES == 2
    // then 32 words will be defined,
    //      the words  0 to 15 will be used to communicate with Core 1
    //      the words 16 to 31 will be used to communicate with Core 2

    unsigned int src[DMA_TRANSFER_NUMBER_OF_WORDS]={
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x76543210, 0xfedcba98, 0x00000000, 0x00000000,

		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x89abcdef, 0x01234567, 0x00000000, 0x00000000};

    // You can even use the src1 and src2 values defined below
    // to reach lower 16-words of the src array as src1
    // and to higher 16-words of as src2
    unsigned int* src1 = src;
    unsigned int* src2 = &(src[16]);
#endif
    //// --- Perform the send operation

    // Start by writing CMD_READ to port1 (command port)
    xil_printf("PORT1=%x\n\r",CMD_READ);
    my_montgomery_port[0] = CMD_READ;

    // Transfer the src array to BRAM
    bram_dma_transfer(dma_config,src,DMA_TRANSFER_NUMBER_OF_WORDS);

    // Wait for done of CMD_READ is done
    // by waiting for port2 (acknowledgement port)
    port2_wait_for_done();


    //// --- Print BRAM contents

    // For checking if send is successful
    print_bram_contents();


    //// --- Perform the compute operation

    // Start by writing CMD_COMPUTE to port1 (command port)
    xil_printf("PORT1=%x\n\r",CMD_COMPUTE);
    my_montgomery_port[0] = CMD_COMPUTE;

    // Wait for done of CMD_COMPUTE is done
	// by waiting for port2 (acknowledgement port)
    port2_wait_for_done();


    //// --- Perform the read operation

    // Start by writing CMD_WRITE to port1 (command port)
    xil_printf("PORT1=%x\n\r",CMD_WRITE);
    my_montgomery_port[0] = CMD_WRITE;

    // Wait for done of CMD_WRITE is done
    port2_wait_for_done(); //Wait until Port2=1


    //// --- Print BRAM contents

    // For receiving the read output of the computation
    print_bram_contents();

    cleanup_platform();

    return 0;
}
