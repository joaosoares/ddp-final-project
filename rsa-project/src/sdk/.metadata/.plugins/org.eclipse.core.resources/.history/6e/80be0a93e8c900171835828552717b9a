#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_cache.h"
#include "platform/performance_counters.h"

#include "interface.h"

#define NUMBER_OF_CORES 1

//Uses an AXI DMA IP Core
//Transfers data from data_read_addr to the M_AXIS_MM2S port
//The sequence is explained in detail in AXI DMA v7.1 - LogiCORE IP Product Guide
//(http://www.xilinx.com/support/documentation/ip_documentation/axi_dma/v7_1/pg021_axi_dma.pdf) on page 72)

int main()
{
    int i;
    init_platform();

    xil_printf("Startup..\n\r");

    test_dma_transfer();

    unsigned int src[DMA_TRANSFER_NUMBER_OF_WORDS];
    //Initialize src
    for (i=0; i< DMA_TRANSFER_NUMBER_OF_WORDS; i++)
        src[i]=i;

    //Test the port-based comms
    xil_printf("PORT1=%x\n\r",0x0);
    my_montgomery_port[0] = 0x0; //Send a command to P1

    init_performance_counters(1);

    int32_t a = get_cycle_counter();
    bram_dma_transfer(dma_config,src,DMA_TRANSFER_NUMBER_OF_WORDS);
    int32_t b = get_cycle_counter();

    printf("diff=%d\n\r",(b-a));

    port2_wait_for_done(); //Wait until Port2=1

    print_bram_contents(); //Print BRAM to serial port.

    //Perform the compute operation
    xil_printf("PORT1=%x\n\r",0x1);
    my_montgomery_port[0] = 0x1; //Send a command to P1
    port2_wait_for_done(); //Wait until Port2=1

    //Write the result to BRAM
    xil_printf("PORT1=%x\n\r",0x2);
    my_montgomery_port[0] = 0x2; //Send a command to P1
    port2_wait_for_done(); //Wait until Port2=1

    print_bram_contents(); //Print BRAM to serial port.

    cleanup_platform();
    return 0;
}
